/**
 * This file was generated by GitHub Copilot (Claude 3.5 Sonnet)
 * Date: September 26, 2025
 */

/**
 * ESLint rule: component-pascal-case
 *
 * Требует, чтобы все React компоненты были названы в PascalCase
 */

export default {
    meta: {
        type: "problem",
        docs: {
            description: "Enforce PascalCase naming for React components",
            category: "Stylistic Issues",
            recommended: false
        },
        fixable: null,
        schema: [],
        messages: {
            componentPascalCase: "React component '{{name}}' should be named in PascalCase.",
        },
    },

    create(context) {
        function isPascalCase(name) {
            return /^[A-Z][a-zA-Z0-9]*$/.test(name);
        }

        function isReactComponent(node) {
            // Проверяем функциональные компоненты
            if (node.type === 'FunctionDeclaration' ||
                (node.type === 'VariableDeclarator' &&
                    (node.init?.type === 'ArrowFunctionExpression' || node.init?.type === 'FunctionExpression'))) {

                // Проверяем, возвращает ли JSX
                const body = node.type === 'FunctionDeclaration' ? node.body : node.init?.body;
                if (!body) return false;

                // Для arrow functions с выражением
                if (node.init?.body?.type === 'JSXElement' || node.init?.body?.type === 'JSXFragment') {
                    return true;
                }

                // Для функций с блоком
                if (body.type === 'BlockStatement') {
                    // Ищем return statement с JSX
                    return body.body.some(stmt => {
                        if (stmt.type === 'ReturnStatement') {
                            return stmt.argument?.type === 'JSXElement' ||
                                stmt.argument?.type === 'JSXFragment' ||
                                (stmt.argument?.type === 'ConditionalExpression' &&
                                    (stmt.argument.consequent?.type === 'JSXElement' ||
                                        stmt.argument.alternate?.type === 'JSXElement'));
                        }
                        return false;
                    });
                }
            }

            // Проверяем классовые компоненты
            if (node.type === 'ClassDeclaration') {
                // Проверяем, наследуется ли от React.Component или Component
                if (node.superClass) {
                    const superClassName = node.superClass.name ||
                        (node.superClass.property && node.superClass.property.name);
                    if (superClassName === 'Component' || superClassName === 'PureComponent') {
                        return true;
                    }
                }
            }

            return false;
        }

        return {
            FunctionDeclaration(node) {
                if (node.id && isReactComponent(node)) {
                    const name = node.id.name;
                    if (!isPascalCase(name)) {
                        context.report({
                            node: node.id,
                            messageId: "componentPascalCase",
                            data: { name }
                        });
                    }
                }
            },

            VariableDeclarator(node) {
                if (node.id?.type === 'Identifier' && isReactComponent(node)) {
                    const name = node.id.name;
                    if (!isPascalCase(name)) {
                        context.report({
                            node: node.id,
                            messageId: "componentPascalCase",
                            data: { name }
                        });
                    }
                }
            },

            ClassDeclaration(node) {
                if (node.id && isReactComponent(node)) {
                    const name = node.id.name;
                    if (!isPascalCase(name)) {
                        context.report({
                            node: node.id,
                            messageId: "componentPascalCase",
                            data: { name }
                        });
                    }
                }
            }
        };
    }
};
